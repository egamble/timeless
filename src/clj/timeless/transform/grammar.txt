(*
No terminal that is written to the output should have a definition that begins
or ends with whitespace, so that the start and end column numbers are correct.
*)


<S0> = ws gte-0 ws
<S1> = ws operation-1 ws


<exp> = group | apply | section | set | seq | str | num | name | quote | unquote | free


group = left-paren ws gte-0 ws right-paren
apply = exp (ws exp)+
<section> = left-section | right-section | prefix-op
prefix-op = left-paren ws op ws right-paren



truncated-embedded = op-10 ws gt-10


(*
Sets can't have empty elements, except that a comma can follow the right-most clause.
*)

clause-maybe-embedded = gt-1

<clause-exp> = truncated-embedded | clause-maybe-embedded
<clause-segment> = (guard-op ws gt-1) | (arrow-op ws clause-exp)

<abbreviated-clause> = clause-segment (ws clause-segment)*
<unabbreviated-clause> = clause-exp (ws clause-segment)*

clause = abbreviated-clause | unabbreviated-clause
set = set-left ws
      (
      epsilon |
      ((clause ws comma ws)* clause (epsilon | (ws comma)))
      )
      ws set-right



(*
Seqs can have empty elements, as sections.

There is no way to make a seq section with a single empty (epsilon) element.
*)

element-maybe-embedded = gte-0

<element> = truncated-embedded | element-maybe-embedded
<element-maybe-empty> = element | missing
missing = epsilon

seq = seq-left ws
      (
      element? |
      ((element-maybe-empty ws comma ws)+ element-maybe-empty) |
      (element ws (comma ws element ws)? range ws element?)
      )
      ws seq-right



(*
string literal
*)
str = #'"[^"]*"'



(*
number literal
*)
num = #'\-?\d+(?:\.\d+)?'



name = !op (declared-name | regular-name)
<regular-name> = #'[a-zA-Z_]\w*'



<comma> = <','>

<ws> = (ws-only | comment)*
<ws-only> = <#'\s+'>
<comment> = <#'#.*\n'>

<set-left> = <'{'>
<set-right> = <'}'>

<seq-left> = <'['>
<seq-right> = <']'>

<left-paren> = <'('>
<right-paren> = <')'>

range = <'..'>

<quote-op> = <"'">
<unquote-op> = <'~'>

<free-op> = <'`'>



<quotable> = group | set | seq | str | num | name | op
quote = quote-op ws quotable
unquote = unquote-op ws quotable



free = free-op ws (name | (left-paren ws name ws right-paren))



(*
The arrow operation is right associative.
*)

<left-0> = left-paren ws (truncated-embedded | gt-0) ws arrow-op ws right-paren
<right-0> = left-paren ws arrow-op ws (truncated-embedded | gte-0) ws right-paren
operation-0 = (truncated-embedded | gt-0) ws arrow-op ws (truncated-embedded | gte-0)

<arrow-op> = op-0
op-0 = '->' | 'â†’'

<gte-0> = exp | _gte-0
<gt-0> = exp | _gt-0
<_gte-0> = operation-0 | _gt-0
<_gt-0> = _gte-1



(*
The guard operation is left associative.
*)

<left-1> = left-paren ws (truncated-embedded | gte-1) ws guard-op ws right-paren
<right-1> = left-paren ws guard-op ws gt-1 ws right-paren
operation-1 = (truncated-embedded | gte-1) ws guard-op ws gt-1

<guard-op> = op-1
op-1 = '|'

<gte-1> = exp | _gte-1
<gt-1> = exp | _gt-1
<_gte-1> = operation-1 | _gt-1

;; An S-expression lexer and parser

(= WS (∪ (:set \space) (:set \tab) (:set \newline) (:set :nospace)))
(= Paren (∪ (:set \() (:set \))))
(= Paren_str (:set (:cons (∈ _ Paren) "")))

;; TODO change range to (:name "..")
(= Alpha (Img (++ (range \a \z) (range \A \Z))))
(= Alphanum (∪ Alpha_char (Img (range \0 \9))))
(= Alphanum_str (∪ (:set "") (:set (:cons (∈ _ Alphanum) (∈ _ Alphanum_str)))))
(= Symbol (:set (:cons (∈ _ Alpha) (∈ _ Alphanum_str))))

(= lex_split
   (:fn S
        (∪ (:fn "" (:seq))
           (:fn (:cons c cs)
                (if (∈ c S) r'
                  ((∪ (:fn (:seq) r')
                      (:fn (:cons s ss)
                           (if (∈ s S) r'
                             (:cons (:cons c s) ss))))
                   r))
                (= r (lex_split S cs))
                (= r' (:cons c r))))))

(= lex_remove_ws
   (remove WS))

(= lex_paren_str
   (map (∪ (:fn (∈ c Paren) (:cons c ""))
           identity)))

(= lex_check
   (map (:fn (∈ s (∪ Symbol Paren_str)) s)))

(= lex
   (∘ lex_check
      lex_remove_ws
      (lex_split (∪ WS Paren))))

(= parse
   (∪ (:fn (:seq) (:seq))
      (:fn (:cons (∉ s Paren_str) ss) (:cons s (parse ss)))
      (:fn (++ (:seq "(") body (:seq ")") ss)
           (:cons (:seq (parse body)) (parse ss)))))

(= lex_parse
   (∘ parse lex))

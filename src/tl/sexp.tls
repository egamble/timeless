;; A parser that recognizes S-expressions and builds an AST

(= WS (∪ (:set \space) (:set \tab) (:set \newline) (:set :nospace)))
(= Paren (∪ (:set \() (:set \))))

(= Alpha (Im (++ ((:name "..") \a \z) ((:name "..") \A \Z))))
(= Alphanum (∪ Alpha (Im ((:name "..") \0 \9))))
(= Alphanum_str (∪ (:set "") (:set (:cons (∈ _ Alphanum) (∈ _ Alphanum_str)))))
(= Symbol (:set (:cons (∈ _ Alpha) (∈ _ Alphanum_str))))

;; Sep is the set of separator characters on which to split.
;; The separator characters are left in the output sequence, while
;; the characters in between the separators are collected into strings.

(= lex_split
   (:fn Sep
        (∪ (:fn "" (:seq))
           (:fn (:cons c cs)
                ((∪ (:fn _ (:cons c r) (∈ c Sep))
                    (:fn _ ((∪ (:fn (:seq) (:seq (:seq c)))
                               (:fn (:cons t ts)
                                    ((∪ (:fn _ (:cons (:seq c) r) (∈ t Sep))
                                        (:fn _ (:cons (:cons c t) ts)))
                                     :emptyfn)))
                            r)))
                 :emptyfn)
                (= r (lex_split Sep cs))))))

(= lex_remove_ws
   (remove WS))

;; Check that all tokens are either parenthesis characters or symbol strings.

(= lex_check
   (map (:fn (∈ s (∪ Symbol Paren)) s)))

(= lex
   (∘ (∘ lex_check
         lex_remove_ws)
      (lex_split (∪ WS Paren))))

(= parse
   (∪ (:fn (:seq) (:seq))
      (:fn (:cons (∉ t Paren) ts) (:cons t (parse ts)))
      (:fn (++ "(" body ")" ts)
           (:cons (parse body) (parse ts)))))

(= lex_parse
   (∘ parse lex))

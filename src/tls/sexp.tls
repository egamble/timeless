;; An S-expression lexer and parser

(= WS_char (∪ (:set \space) (:set \tab) (:set \newline) (:set :nospace)))
(= Paren_char (∪ (:set \() (:set \))))
(= Paren_str (:set (:cons (∈ _ Paren_char) "")))

;; TODO change range to (:name "..")
(= Alpha_char (Img (++ (range \a \z) (range \A \Z))))
(= Alphanum_char (∪ Alpha_char (Img (range \0 \9))))
(= Alphanum_str (∪ (:set "") (:set (:cons (∈ _ Alphanum_char) (∈ _ Alphanum_str)))))
(= Symbol (:set (:cons (∈ _ Alpha_char) (∈ _ Alphanum_str))))

(= Token (∪ Symbol Paren_str))

(= lex
   (∪ (:fn (:seq) (:seq))
      (:fn (:cons c cs)
           ((∪ (:fn (∈ _ WS_char) r)
               (:fn (∈ _ Paren_char) r')
               (:fn _ ((∪ (:fn (:seq) r')
                          (:fn (:cons s ss)
                               ((∪ (:fn (∈ _ Paren_str) r')
                                   (:fn _ (:cons (:cons c s) ss)))
                                s)))
                       r)))
            c)
           (= r (lex cs))
           (= r' (:cons (:cons c "") r)))))

(= lex_check
   (∪ (:fn (:seq) (:seq))
      (:fn (:cons (∈ s Token) ss) (:cons s (lex_check ss)))))

(= parse
   (∪ (:fn (:seq) (:seq))
      (:fn (:cons (∉ s Paren_str) ss) (:cons s (parse ss)))
      (:fn (++ (:seq "(") body (:seq ")") ss)
           (:cons (:seq (parse body)) (parse ss)))))

(= lex_parse (∘ parse lex_check lex))

<S> = exp*

<exp> = set | seq | tup | group | operation | right-section | left-section | prefix-op | str | name | number

application = exp exp+

partial-comparison = comparison-op exp
single-comparison = exp comparison-op exp
multiple-comparison = exp comparison-op exp (comparison-op exp)+
<full-comparison> = single-comparison | multiple-comparison


(* Sets can't have empty elements. *)

(* Sets can have partial comparisons. *)

<set-element> = exp | application | partial-comparison | full-comparison
set = (set-left set-right) | (set-left (set-element comma)* set-element set-right)


(* If a seq ends with a comma, an empty element is produced, for a seq section. *)
(* There is no way to make a seq section with a single empty (epsilon) element. *)

(* Seqs and tuples can't have partial comparisons. *)

<non-epsilon-element> = exp | application | full-comparison
element = non-epsilon-element | epsilon

seq = (seq-left non-epsilon-element? seq-right) | (seq-left (element comma)+ element seq-right)
tup = left-paren (element comma)+ element right-paren


right-section = left-paren op exp right-paren
left-section = left-paren exp op right-paren
prefix-op = left-paren op right-paren


<group> = left-paren (exp | application | single-comparison | multiple-comparison) right-paren


<maybe-embedded> = exp | partial-comparison | single-comparison
operation = (exp non-guard-arrow-comparison-op exp) | (maybe-embedded guard-op exp) | (maybe-embedded arrow-op maybe-embedded) 


<set-left> = ws <'{'> ws
<set-right> = ws <'}'> ws

<seq-left> = ws <'['> ws
<seq-right> = ws <']'> ws

<left-paren> = ws <'('> ws
<right-paren> = ws <')'> ws


<op> = non-guard-arrow-comparison-op | comparison-op | guard-op | arrow-op
<non-guard-arrow-comparison-op> = plus-op
<comparison-op> = equal-op

plus-op = ws <'+'> ws
arrow-op = ws <'->'> ws
guard-op = ws <'|'> ws
equal-op = ws <'='> ws


(* string literal *)
str = ws #'\".*\"' ws

(* regular name *)
name = ws #'[a-zA-Z_]\w*' ws

(* number literal *)
number = ws #'\d+(?:\.\d+)?' ws

<comma> = ws <','> ws

<ws> = (ws-only | comment)*
<ws-only> = <#'\s+'>
<comment> = <#'#.*\n'>

<S> = operation-1


<exp> = group | application | section | set | seq | tuple | str | name | number | quote | unquote


group = left-paren gte-0 right-paren
application = exp exp+
<section> = left-section | right-section | prefix-op
prefix-op = left-paren op right-paren



truncated-embedded = op-10 gt-10


(*
Sets can't have empty elements.
*)

clause-maybe-embedded = gt-1

<clause-exp> = truncated-embedded | clause-maybe-embedded
<clause-segment> = (guard-op gt-1) | (arrow-op clause-exp)

<abbreviated-clause> = clause-segment+
<unabbreviated-clause> = clause-exp clause-segment*

clause = abbreviated-clause | unabbreviated-clause
set = (set-left set-right) | (set-left (clause comma)* clause set-right)



(*
Seqs and tuple can have empty elements, as sections.

There is no way to make a seq or tuple section with a single empty (epsilon) element.
*)

element-maybe-embedded = gte-0

<element> = truncated-embedded | element-maybe-embedded
<element-maybe-empty> = element | empty-element
empty-element = epsilon

seq = seq-left
      (
      element? |
      ((element-maybe-empty comma)+ element-maybe-empty) |
      (element (comma element)? range element?)
      )
      seq-right

tuple = left-paren (element-maybe-empty comma)+ element-maybe-empty right-paren



(*
string literal
*)
str = ws #'\".*\"' ws



(*
number literal
*)
number = ws #'\d+(?:\.\d+)?' ws



name = declared-name | regular-name
<regular-name> = !op ws #'[a-zA-Z_]\w*' ws



<comma> = ws <','> ws

<ws> = (ws-only | comment)*
<ws-only> = <#'\s+'>
<comment> = <#'#.*\n'>

<set-left> = ws <'{'> ws
<set-right> = ws <'}'> ws

<seq-left> = ws <'['> ws
<seq-right> = ws <']'> ws

<left-paren> = ws <'('> ws
<right-paren> = ws <')'> ws

range = ws <'..'> ws

<quote-op> = ws <"'"> ws
<unquote-op> = ws <"~"> ws



<quotable> = group | set | seq | tuple | str | name | number | op
quote = quote-op quotable
unquote = unquote-op quotable



(*
The arrow operation is right associative.
*)

<left-0> = left-paren (truncated-embedded | gt-0) arrow-op right-paren
<right-0> = left-paren arrow-op (truncated-embedded | gte-0) right-paren
operation-0 = (truncated-embedded | gt-0) arrow-op (truncated-embedded | gte-0)

<arrow-op> = op-0
op-0 = ws ('->' | 'â†’') ws

<gte-0> = exp | _gte-0
<gt-0> = exp | _gt-0
<_gte-0> = operation-0 | _gt-0
<_gt-0> = _gte-1



(*
The guard operation is left associative.
*)

<left-1> = left-paren (truncated-embedded | gte-1) guard-op right-paren
<right-1> = left-paren guard-op gt-1 right-paren
operation-1 = (truncated-embedded | gte-1) guard-op gt-1

<guard-op> = op-1
op-1 = ws '|' ws

<gte-1> = exp | _gte-1
<gt-1> = exp | _gt-1
<_gte-1> = operation-1 | _gt-1

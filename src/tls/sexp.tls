;; An S-expression lexer and parser

(= WS (∪ (:set \space) (:set \tab) (:set \newline) (:set :nospace)))
(= Paren (∪ (:set \() (:set \))))

;; TODO change range to (:name "..")
(= Alpha (Img (++ (range \a \z) (range \A \Z))))
(= Alphanum (∪ Alpha (Img (range \0 \9))))
(= Alphanum_str (∪ (:set "") (:set (:cons (∈ _ Alphanum) (∈ _ Alphanum_str)))))
(= Symbol (:set (:cons (∈ _ Alpha) (∈ _ Alphanum_str))))

(= lex_split
   (:fn Sep
        (∪ (:fn "" (:seq))
           (:fn (:cons c cs)
                ((∪ (:fn _ r' (∈ c Sep))
                    (:fn _ ((∪ (:fn (:seq) r')
                               (:fn (:cons t ts)
                                    ((∪ (:fn _ r' (∈ t Sep))
                                        (:fn _ (:cons (:cons c t) ts)))
                                     :emptyfn)))
                            r)))
                 :emptyfn)
                (= r' (:cons c r))
                (= r (lex_split Sep cs))))))

(= lex_remove_ws
   (remove WS))

(= lex_check
   (map (:fn (∈ s (∪ Symbol Paren)) s)))

(= lex
   (∘ (∘ lex_check
         lex_remove_ws)
      (lex_split (∪ WS Paren))))

(= parse
   (∪ (:fn (:seq) (:seq))
      (:fn (:cons (∉ t Paren) ts) (:cons t (parse ts)))
      (:fn (++ "(" body ")" ts)
           (:cons (:seq (parse body)) (parse ts)))))

(= lex_parse
   (∘ parse lex))
